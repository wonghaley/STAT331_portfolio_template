---
title: "STAT 331 Portfolio"
author: "Haley Wong"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an B.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 2 Question 1
surveys <- read_csv(here::here("Week 2", "Labs", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

#Lab 3
teacher_evals <- read_csv(here::here("Week 3", "Labs", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Lab 3 Question 5
teacher_evals_clean <- teacher_evals |>
    rename(sex = "gender") |>
  group_by(course_id) |>
  mutate(
    course_participants = sum(no_participants)
  ) |>
  filter(course_participants > 10) |>
  ungroup() |>
  mutate(across(c(teacher_id, question_no, academic_degree, sex), as.factor)) |>
  select(
    course_id,
    teacher_id,
    question_no,
    no_participants,
    resp_share,
    SET_score_avg,
    percent_failed_cur,
    academic_degree,
    seniority,
    sex
  )

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., undefined

```{r}
#| label: wd-2-ex-3

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

#Lab 5
suspect2 <- facebook_event_checkin |>
  filter(event_name == "SQL Symphony Concert",
         date >= 20171201, date <= 20171231) |>
  inner_join(person, by = c("person_id" = "id"))|>
  inner_join(drivers_license, by = c("license_id" = "id"))|>
  filter(hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         height >= 64, height <= 66)

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5
w2 <- person |>
  filter(address_street_name == "Franklin Ave",
         str_detect(name, "^Annabel"))

w2
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#Lab 5
# Revised: date changed to lubridate
crime_scene_report |>
  filter(city == "SQL City", 
         type == "murder", 
         ymd(date) == "2018-01-15")
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
# Lab 4 Question 5

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(
        names_from = study_year,
        values_from = median_income,
        names_prefix = "median_income_for_year_") |>

arrange(desc('median_income_for_year_2018'))

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
# Lab 5
w2 <- person |>
  filter(address_street_name == "Franklin Ave",
         str_detect(name, "^Annabel"))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

#Lab 5
#Revised: switch inner join to left join
interview |>
  left_join(person, by = c("person_id" = "id")) |>
  filter(name == "Morty Schapiro") |>
  select(name, transcript)
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

#Lab 5
#Revised: switch inner join to right join
person |>
  right_join(interview, by = c("id" = "person_id")) |>
  filter(name == "Morty Schapiro") |>
  select(name, transcript)
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 5
#Revised: switch inner join to left join
interview |>
  left_join(person, by = c("person_id" = "id")) |>
  filter(name == "Annabel Miller") |>
  select(name, transcript)
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
# Lab 5
interview |>
  inner_join(person, by = c("person_id" = "id")) |>
  filter(name == "Morty Schapiro") |>
  select(name, transcript)

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

#Lab 5
suspect2 <- facebook_event_checkin |>
  filter(event_name == "SQL Symphony Concert",
         date >= 20171201, date <= 20171231) |>
  inner_join(person, by = c("person_id" = "id"))|>
  inner_join(drivers_license, by = c("license_id" = "id"))|>
  filter(hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         height >= 64, height <= 66)
suspect2
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Lab 5
#Revised to use semi_join (used class slides)
interview |>
  semi_join(suspect2,
            by = join_by(person_id == license_id))|>
  pull(transcript)

```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#Lab 5
#Anti_join gives all rows in interview whose person_id does not appear in id (opposite of inner_join)
interview |>
  anti_join(person, by = c("person_id" = "id"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

#Lab 4 Question 5

#Revised: used %in% for the study year

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(
        names_from = study_year,
        values_from = median_income,
        names_prefix = "median_income_for_year_") |>

arrange(desc('median_income_for_year_2018'))


```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   Challenge 2
-   Lab 3
-   Lab 4
-   Lab 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

#Lab 4 Question 5
# Revised: used %in%
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(
        names_from = study_year,
        values_from = median_income,
        names_prefix = "median_income_for_year_") |>

arrange(desc('median_income_for_year_2018'))

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 4 Question 7
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Challenge 2 

ggplot(
  data = surveys,
  mapping = aes( x = species, y = weight, color = sex)) +
  geom_boxplot (outliers = FALSE) +
  scale_colour_brewer(palette = "Set1")+
labs( title = "Distribution of Body Weight by Rodent Species in Portal, Arizona",
  x = "Rodent Species", 
  y = "Weight (g)", 
  color = "Sex") +
  theme(axis.text.x = element_text(hjust = 1, size = 6)) +
  theme(legend.position = "none")

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

#Lab 4 Question 7

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

#Lab 4 Question 7

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Challenge 4

ggplot(prices_long, aes(x = study_year, y = median_price, color = setting_label)) +
  geom_ribbon(
    data = table |> 
      mutate(age = factor(age, levels = c("infant", "toddler", "preschool"))),
    aes(x = study_year, ymin = family, ymax = center_based, fill = "Price Gap"),
    alpha = 0.15,
    inherit.aes = FALSE
  ) +
  geom_line(size = 1.2) +
  geom_point(size = 2.5, alpha = 0.9) +
  facet_wrap(~ age, nrow = 1) +
  scale_color_brewer(palette = "Set2") +
  scale_fill_manual(values = c("Price Gap" = "gray70")) +
  scale_y_continuous(labels = scales::label_dollar()) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Center-Based vs Family Childcare Costs Over Time",
    subtitle = "Shaded area shows median price gap by age group (California)",
    x = "Study Year",
    y = "Median Weekly Price (USD)",
    color = "Care Setting",
    fill = ""
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 13, hjust = 0.5),
    legend.position = "right"
  )

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
#Challenge 4

ggplot(prices_long, aes(x = study_year, y = median_price, color = setting_label)) +
  geom_ribbon(
    data = table |> 
      mutate(age = factor(age, levels = c("infant", "toddler", "preschool"))),
    aes(x = study_year, ymin = family, ymax = center_based, fill = "Price Gap"),
    alpha = 0.15,
    inherit.aes = FALSE
  ) +
  geom_line(size = 1.2) +
  geom_point(size = 2.5, alpha = 0.9) +
  facet_wrap(~ age, nrow = 1) +
  scale_color_brewer(palette = "Set2") +
  scale_fill_manual(values = c("Price Gap" = "gray70")) +
  scale_y_continuous(labels = scales::label_dollar()) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Center-Based vs Family Childcare Costs Over Time",
    subtitle = "Shaded area shows median price gap by age group (California)",
    x = "Study Year",
    y = "Median Weekly Price (USD)",
    color = "Care Setting",
    fill = ""
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 13, hjust = 0.5),
    legend.position = "right"
  )

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

#Lab 2 Question 8
# Don't need to tilt head. Revised element text size.
ggplot(
  data = surveys,
  mapping = aes( x = species, y = weight)) +
  geom_boxplot (outliers = FALSE) +
  geom_jitter(alpha = .2, color = "steelblue") +
  labs( title = "Distribution of Body Weight by Rodent Species in Portal, Arizona",
  x = "Rodent Species", y = "Weight (g)") +
theme(axis.text.x = element_text(size = 6))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
# Lab 2 Question 8
# Don't need to tilt head. Revised element text size.
ggplot(
  data = surveys,
  mapping = aes( x = species, y = weight)) +
  geom_boxplot (outliers = FALSE) +
  geom_jitter(alpha = .2, color = "steelblue") +
  labs( title = "Distribution of Body Weight by Rodent Species in Portal, Arizona",
  x = "Rodent Species", y = "Weight (g)") +
theme(axis.text.x = element_text(size = 6))

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
#Lab 4 Question 7

#Revised code: fixed the ordering and the labeling for region. made code not an object
# used chat to help figure out the code used to reorder the legend amd fixed some of my other code so that it would run properly: https://chatgpt.com/c/68f9b930-92c4-832c-9aba-9bcccbb49b84

ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
#Challenge 3

ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  labs(
    title = "Evaluation of Teachers' Use of Activities",
    x = "Years of Experience",
    y= "",
    fill = "Evaluation Rating"
  ) +
  theme(legend.position = "top") + 
  scale_fill_manual(values = c(
    excellent = "#837099",
    standard = "#867052"
  )) +
  scale_y_continuous(labels = scales::percent_format())

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
#Challenge 2
ggplot(
  data = surveys,
  mapping = aes( x = species, y = weight, color = sex)) +
  geom_boxplot (outliers = FALSE) +
  scale_colour_brewer(palette = "Set1")+
labs( title = "Distribution of Body Weight by Rodent Species in Portal, Arizona",
  x = "Rodent Species", 
  y = "Weight (g)", 
  color = "Sex") +
  theme(axis.text.x = element_text(hjust = 1, size = 6)) +
  theme(legend.position = "none")

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

#Challenge 4
ggplot(prices_long, aes(x = study_year, y = median_price, color = setting_label)) +
  geom_ribbon(
    data = table |> 
      mutate(age = factor(age, levels = c("infant", "toddler", "preschool"))),
    aes(x = study_year, ymin = family, ymax = center_based, fill = "Price Gap"),
    alpha = 0.15,
    inherit.aes = FALSE
  ) +
  geom_line(size = 1.2) +
  geom_point(size = 2.5, alpha = 0.9) +
  facet_wrap(~ age, nrow = 1) +
  scale_color_brewer(palette = "Set1") +
  scale_fill_manual(values = c("Price Gap" = "gray70")) +
  scale_y_continuous(labels = scales::label_dollar()) +
  scale_x_continuous(breaks = seq(2008, 2018, 2)) +
  labs(
    title = "Center-Based vs Family Childcare Costs Over Time",
    subtitle = "Shaded area shows median price gap by age group (California)",
    x = "Study Year",
    y = "Median Weekly Price (USD)",
    color = "Care Setting",
    fill = ""
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
    plot.subtitle = element_text(size = 13, hjust = 0.5),
    legend.position = "right"
  )
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 3 Question 12
teacher_evals_clean |>
  filter(
    academic_degree %in% c('dr', 'prof')
  ) |>
  group_by(teacher_id, seniority, sex) |>
  summarise(
    avg_response = mean(resp_share, na.rm = TRUE)
  ) |>
  ungroup() |>
  filter(
    avg_response == min(avg_response) | avg_response == max(avg_response)
  )

```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#Lab 3 Question 10
#Revised to use across

teacher_evals_clean |>
  filter(question_no == 901) |>
  select(teacher_id, course_id, SET_score_avg) |>
  group_by(teacher_id) |>
  mutate(no_courses_taught = n_distinct(course_id)) |>
  filter(no_courses_taught >= 5) |>
  summarise(
    across(
      SET_score_avg,
      mean,
      na.rm = TRUE,
      .names = "avg_rating"
    ),
    .groups = "drop"
  ) |>
  filter(
    avg_rating == min(avg_rating) | avg_rating == max(avg_rating)
  ) |>
  arrange(avg_rating)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 5

suspect2 <- facebook_event_checkin |>
  filter(event_name == "SQL Symphony Concert",
         date >= 20171201, date <= 20171231) |>
  inner_join(person, by = c("person_id" = "id"))|>
  inner_join(drivers_license, by = c("license_id" = "id"))|>
  filter(hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         height >= 64, height <= 66)
suspect2

```

-   Example 2

```{r}
#| label: dvs-5-2
# Lab 3 Question 9

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(question_count = n()) |>
  filter(question_count == 9) |>
  nrow()

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

#Lab 4 Question 5

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarise(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(
        names_from = study_year,
        values_from = median_income,
        names_prefix = "median_income_for_year_") |>

arrange(desc('median_income_for_year_2018'))

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Lab 5
suspect2 <- facebook_event_checkin |>
  filter(event_name == "SQL Symphony Concert",
         date >= 20171201, date <= 20171231) |>
  inner_join(person, by = c("person_id" = "id"))|>
  inner_join(drivers_license, by = c("license_id" = "id"))|>
  filter(hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         height >= 64, height <= 66)|>

interview |>
  inner_join(person, by = c("person_id" = "id")) |>
  filter(name == "Miranda Priestly") |>
  select(name, transcript)

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
# Lab 3 Question 5
#Used mutate(across) instead of the older functions
teacher_evals_clean <- teacher_evals |>
    rename(sex = "gender") |>
  group_by(course_id) |>
  mutate(
    course_participants = sum(no_participants)
  ) |>
  filter(course_participants > 10) |>
  ungroup() |>
  mutate(across(c(teacher_id, question_no, academic_degree, sex), as.factor)) |>
  select(
    course_id,
    teacher_id,
    question_no,
    no_participants,
    resp_share,
    SET_score_avg,
    percent_failed_cur,
    academic_degree,
    seniority,
    sex
  )

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 7
ca_childcare |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group",
    values_to = "cost") |>
  
  mutate(
    age_group = recode(age_group,
                       mc_infant = "Infant",
                       mc_toddler = "Toddler",
                       mc_preschool = "Preschool"),
    
    Region = recode(region,
        sf = "San Francisco Bay Area",
        oc = "Orange County",
        la = "Los Angeles County",
        nsj = "Northern San Joaquin Valley",
        centralcoast = "Central Coast",
        inland = "Inland Empire",
        superior = "Superior California",
        ssj = "Southern San Joaquin Valley",
        sd = "San Diego-Imperial",
        northcoast = "North Coast"),
    
    Region = fct_reorder2(Region, study_year, cost)
  ) |>
  
  ggplot(mapping = aes(x = study_year,
                       y = cost, 
                       color = Region)) +
    geom_point() +
    geom_smooth(method = "loess") +
    facet_wrap(~ age_group) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     breaks = seq(0, 500, by = 100))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Challenge 3 Question 3
chisq.test(
  x = teacher_evals_compare$SET_level,
  y = teacher_evals_compare$sen_level
)
```

-   Example 2

```{r}
#| label: dsm-2-2

#Lab 2 Question 17
aov(data = surveys, weight ~ species)
```

-   Example 3

```{r}
#| label: dsm-2-3
#Lab 4 Question 9
reg_mod1 <- lm(data = ca_childcare,
               mc_infant ~ mhi_2018)
summary(reg_mod1)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course I have revised my thinking after incorporating the comments and feedback from labs and challenges. I would review past lectures, notes, and in-class assignments to help with my thinking on the labs and challenges. Overall, fixing the parts of the labs and challenges have helped me learn and grow because I would get the chance to fix parts of my code that I may have not originally thought could work a different way. This portfolio incorporates new thinking in some parts and my new codes from the assignments after fixing them.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

With the challenges assignments, I was able to extend my thinking by approaching the tasks from different perspectives. I was able to apply what I had learned in class from the lecture and collaborative assignments to these assignments. In the portfolio, I tried to incorporate a variety of different codes from the assignments I have completed to show how I extended my thinking.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

In class, I collaborate with my peers through the practice activities where we are able to converse both of our perspectives of the code and the appraches we think of. I was able to learn how to explain how my own thought process as well as practice new ways to code through my partner. Additionally, I have done peer reviews every week.

I thought my peer review for Lab 4 was clean and fairly thoughtful since I did not see much error:

I would like to start off by saying I really like your theme because it makes it very easy to clearly read everything. I also liked your consistent spacing around = and also moving to new lines after commas where needed. Your code is nicely organized and easy to read and it looks like you didn't create any unnecessary objects. One thing for your plot that you recreated is that you could try to make it wider rather than taller but other than that it looks really clean.
